;
; VideoGeneration.asm
;
; Created: 10-05-2020 12:09:00
; Author : Sondre
;

.cseg
rjmp start

.include "tn817def.inc"

; Define VGA timing parameters
.EQU CLK_DIV = 2
.EQU H_VISIBLE = 800
.EQU H_FRONT = 40
.EQU H_SYNC = 128
.EQU H_BACK = 88
.EQU H_FULL = 1056
.EQU V_VISIBLE = 600
.EQU V_FRONT = 1
.EQU V_SYNC = 4
.EQU V_BACK = 23
.EQU V_FULL = 628

; CCP unlock macro
.macro CCP_UNLOCK_IO
	ldi r16, CPU_CCP_IOREG_gc
	out CPU_CCP, r16
.endmacro

; Main entry point
.cseg
start:
	; CLK_PER = 20 MHz (16/20 fuse set to 20)
	CCP_UNLOCK_IO
	ldi r16, 0
	sts CLKCTRL_MCLKCTRLB, r16
	
	; HSYNC on PB0, generated by TCA
	sbi VPORTB_DIR, 0
	cbi VPORTB_OUT, 0
	
	; Configure TCA
	ldi r16, low(H_FULL / CLK_DIV - 1)
	sts TCA0_SINGLE_PER, r16
	ldi r16, high(H_FULL / CLK_DIV - 1)
	sts (TCA0_SINGLE_PER+1), r16
	
	ldi r16, low((H_BACK + H_VISIBLE + H_FRONT) / CLK_DIV - 1)
	sts TCA0_SINGLE_CMP0, r16
	ldi r16, high((H_BACK + H_VISIBLE + H_FRONT) / CLK_DIV - 1)
	sts (TCA0_SINGLE_CMP0+1), r16

	ldi r16, TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc
	sts TCA0_SINGLE_CTRLB, r16

	ldi r16, TCA_SINGLE_OVF_bm
	sts TCA0_SINGLE_INTCTRL, r16

	; Start TCA just before wraparound
	ldi r16, low(H_FULL / CLK_DIV - 1)
	sts TCA0_SINGLE_CNT, r16
	ldi r16, high(H_FULL / CLK_DIV - 1)
	sts (TCA0_SINGLE_CNT+1), r16

	nop
	nop
	nop
	nop

	; VSYNC on PC0, generated in software
	sbi VPORTC_DIR, 0
	sbi VPORTC_OUT, 0

	; Setup 16 bit register Z to count scanlines
	clr ZL
	clr ZH

	
	; Pixel data output on PA5, generated by USART0 filtered through CCL,LUT0
	sbi VPORTA_DIR, 5
	cbi VPORTA_OUT, 5

	; Use PA1 as gate output to disable USART,TXD during blanking intervals
	sbi VPORTA_DIR, 3
	cbi VPORTA_OUT, 3

	; Configure USART0
	ldi r16, USART_TXEN_bm
	sts USART0_CTRLB, r16
	ldi r16, USART_MSPI_CMODE_MSPI_gc
	sts USART0_CTRLC, r16
	ldi r16, (1 << 6)
	sts USART0_BAUD, r16

	; Configure CCL
	ldi r16, CCL_INSEL1_USART0_gc | CCL_INSEL0_MASK_gc
	sts CCL_LUT0CTRLB, r16
	ldi r16, CCL_INSEL2_IO_gc
	sts CCL_LUT0CTRLC, r16
	ldi r16, 0b01000000
	sts CCL_TRUTH0, r16
	ldi r16, CCL_ENABLE_bm | CCL_OUTEN_bm
	sts CCL_LUT0CTRLA, r16
	ldi r16, CCL_ENABLE_bm
	sts CCL_CTRLA, r16


	; Enable TCA to start video signal
	ldi r16, TCA_SINGLE_ENABLE_bm
	sts TCA0_SINGLE_CTRLA, r16
	nop ; TCA0 wraps to 0x0000
	nop ; TCA0 counts to 0x0001
	nop ; TCA0 counts to 0x0002, as sync line goes high

; This loop should be synchronous with TCA, so it must run exactly H_FULL/CLK_DIV (1056/2=528) clock cycles
;	TCA0.CNT is H_BACK/CLK_DIV-LOOP_HEADSTART at the top of this loop
scanline_loop:
	nop nop nop nop nop nop nop nop nop nop													  ; 2-11
	nop nop nop nop nop nop nop nop nop nop													  ; 12-21
	nop nop nop nop nop nop nop nop nop nop													  ; 22-31
	nop nop nop nop																			  ; 32-35

	; Setup before image interval
	sbrs r5, 0																				  ; 36
		; Line is in the visible portion
		rjmp setup_visible_line																  ; 37-38
	sbrc r5, 1																				  ; 38
		; Line is in the vertical sync pulse
		rjmp setup_sync_line																  ; 39-40
	
	; Setup_blank_line
		nop nop nop nop nop																	  ; 40-44
		sbi VPORTC_OUT, 0 ; Set sync pulse high												  ; 45
		rjmp blank_pixel_line																  ; 46-47
	
	setup_sync_line:
		nop nop nop nop																		  ; 41-44
		cbi VPORTC_OUT, 0 ; Set sync pulse low												  ; 45
		rjmp blank_pixel_line																  ; 46-47

	setup_visible_line:
		ldi r16, 0x40 ; Output byte 0														  ; 39
		sts USART0_TXDATAL, r16 ; Data transmission starts 3 clock cycles later				  ; 40-41
		nop nop nop																			  ; 42-44
		; Enable pixel data output at the same time as USART starts transmitting
		sbi VPORTA_OUT, 3																	  ; 45
		rjmp pixel_phase																	  ; 46-47

; >>> TCA0.CNT = 48
	pixel_phase:
	nop nop nop nop nop nop nop nop															  ; 48-55
	
	ldi r16, 0x7E ; Output byte 1															  ; 56
	sts USART0_TXDATAL, r16																	  ; 57-58
	nop nop nop nop nop nop nop nop nop nop nop nop nop										  ; 59-71
	
	ldi r16, 0x81 ; Output byte 2															  ; 72
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x7E ; Output byte 3
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x81 ; Output byte 4
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x7E ; Output byte 5
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x81 ; Output byte 6
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 7
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 8
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 9
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 10
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 11
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 12
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 13
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 14
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 15
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 16
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 17
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 18
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 19
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 20
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 21
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 22
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0x00 ; Output byte 23
	sts USART0_TXDATAL, r16
	nop nop nop nop nop nop nop nop nop nop nop nop nop
	
	ldi r16, 0xFF ; Output byte 24															  ; 424
	sts USART0_TXDATAL, r16																	  ; 425-426
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop	nop nop nop nop					  ; 427-444
	
	; Turn off pixel data
	cbi VPORTA_OUT, 3																		  ; 445
	rjmp horizontal_blanking_interval
	
; >>> TCA0.CNT = 48
	blank_pixel_line:
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 48-67
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 68-87
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 88-107
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 108-127
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 128-147
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 148-167
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 168-187
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 188-207
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 208-227
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 228-247
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 248-267
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 268-287
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 288-307
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 308-327
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 328-347
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 348-367
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 368-387
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 388-407
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 408-427
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop						  ; 428-444
	
	; Turn off pixel data
	cbi VPORTA_OUT, 3																		  ; 445
	rjmp horizontal_blanking_interval														  ; 446-447

	horizontal_blanking_interval:
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop					  ; 448-465 (front porch)
	
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 466-485
	nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop			  ; 486-505
	nop nop nop nop																			  ; 506-509

	; Increment and wrap line counter, and set r5 to 0, 1, 2 or 3 depending on
	; which vertical phase we are in (visible, front, sync, or back)
	adiw ZH:ZL, 1																			  ; 510-511

	; First, check top byte. If this is not 0x02, we are in the visible phase
	cpi ZH, 0x02																			  ; 512
	brne z_phase_visible																	  ; 513

	cpi ZL, low(V_VISIBLE)																	  ; 514
	breq z_phase_front																		  ; 515

	cpi ZL, low(V_VISIBLE+V_FRONT)															  ; 516
	breq z_phase_sync																		  ; 517

	cpi ZL, low(V_VISIBLE+V_FRONT+V_SYNC)													  ; 518
	breq z_phase_back																		  ; 519

	cpi ZL, low(V_FULL)																		  ; 520
	breq z_phase_wrap																		  ; 521-522

	nop nop nop nop																			  ; 522-525
	rjmp z_phase_done																		  ; 526-527

	; Handle each phase separatly
	z_phase_visible:
		; No changes here, so just wait the right amount of time
		nop nop nop nop nop nop nop nop nop nop nop											  ; 515-525
	rjmp z_phase_done																		  ; 526-527

	z_phase_front:
		; Start of front porch
		inc r5																				  ; 517
		nop nop nop nop nop nop nop nop														  ; 518-525
	rjmp z_phase_done																		  ; 526-527

	z_phase_sync:
		; Start of sync pulse
		inc r5																				  ;	519
		inc r5																				  ;	520
		nop nop nop nop nop																	  ;	521-525
	rjmp z_phase_done																		  ; 526-527

	z_phase_back:
		; Start of back porch
		dec r5																				  ;	521
		dec r5																				  ;	522
		nop nop nop																			  ;	523-525
	rjmp z_phase_done																		  ; 526-527

	z_phase_wrap:
		clr r5																				  ; 523
		clr ZH																				  ; 524
		clr ZL																				  ; 525
	rjmp z_phase_done																		  ; 526-527


	z_phase_done: ; 16 cycles after adiw ZH:ZL, 1

; >>> TCA0.CNT = 37
    rjmp scanline_loop ; Jump back takes 2 cycles											  ; 0-1


