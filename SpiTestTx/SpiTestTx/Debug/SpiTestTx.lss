
SpiTestTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba9  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016f5  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  0000342e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000376c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d49  00000000  00000000  00003790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  000044d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000045a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	34 c0       	rjmp	.+104    	; 0xac <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
#include <util/delay.h>


int main(void)
{
	PORTMUX.CTRLB = PORTMUX_SPI0_ALTERNATE_gc;
  46:	84 e0       	ldi	r24, 0x04	; 4
  48:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__RODATA_PM_OFFSET__+0x7f8201>
	PORTC.DIRSET = (1 << 0) | (1 << 2) | (1 << 3); // Set MOSI, SCK, and ~SS as outputs
  4c:	e0 e4       	ldi	r30, 0x40	; 64
  4e:	f4 e0       	ldi	r31, 0x04	; 4
  50:	8d e0       	ldi	r24, 0x0D	; 13
  52:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = (1 << 3);
  54:	88 e0       	ldi	r24, 0x08	; 8
  56:	85 83       	std	Z+5, r24	; 0x05
	
	SPI0.CTRLB = SPI_BUFWR_bm | SPI_SSD_bm | SPI_MODE_0_gc;
  58:	e0 e2       	ldi	r30, 0x20	; 32
  5a:	f8 e0       	ldi	r31, 0x08	; 8
  5c:	84 e4       	ldi	r24, 0x44	; 68
  5e:	81 83       	std	Z+1, r24	; 0x01
	
	SPI0.CTRLA = SPI_MASTER_bm | SPI_PRESC_DIV16_gc | SPI_ENABLE_bm;
  60:	83 e2       	ldi	r24, 0x23	; 35
  62:	80 83       	st	Z, r24
	
    while (1) 
    {
	    PORTC.OUTCLR = (1 << 3);
  64:	a0 e4       	ldi	r26, 0x40	; 64
  66:	b4 e0       	ldi	r27, 0x04	; 4
  68:	88 e0       	ldi	r24, 0x08	; 8
		SPI0.DATA = 0xCA;
  6a:	3a ec       	ldi	r19, 0xCA	; 202
		_delay_us(50);
		SPI0.DATA = 0xFE;
  6c:	2e ef       	ldi	r18, 0xFE	; 254
		_delay_us(50);
		SPI0.DATA = 0xBA;
  6e:	9a eb       	ldi	r25, 0xBA	; 186
	
	SPI0.CTRLA = SPI_MASTER_bm | SPI_PRESC_DIV16_gc | SPI_ENABLE_bm;
	
    while (1) 
    {
	    PORTC.OUTCLR = (1 << 3);
  70:	16 96       	adiw	r26, 0x06	; 6
  72:	8c 93       	st	X, r24
  74:	16 97       	sbiw	r26, 0x06	; 6
		SPI0.DATA = 0xCA;
  76:	34 83       	std	Z+4, r19	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	47 e3       	ldi	r20, 0x37	; 55
  7a:	4a 95       	dec	r20
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0x34>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <__EEPROM_REGION_LENGTH__>
		_delay_us(50);
		SPI0.DATA = 0xFE;
  80:	24 83       	std	Z+4, r18	; 0x04
  82:	57 e3       	ldi	r21, 0x37	; 55
  84:	5a 95       	dec	r21
  86:	f1 f7       	brne	.-4      	; 0x84 <__EEPROM_REGION_LENGTH__+0x4>
  88:	00 c0       	rjmp	.+0      	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>
		_delay_us(50);
		SPI0.DATA = 0xBA;
  8a:	94 83       	std	Z+4, r25	; 0x04
  8c:	67 e3       	ldi	r22, 0x37	; 55
  8e:	6a 95       	dec	r22
  90:	f1 f7       	brne	.-4      	; 0x8e <__EEPROM_REGION_LENGTH__+0xe>
  92:	00 c0       	rjmp	.+0      	; 0x94 <__EEPROM_REGION_LENGTH__+0x14>
		_delay_us(50);
		PORTC.OUTSET = (1 << 3);
  94:	15 96       	adiw	r26, 0x05	; 5
  96:	8c 93       	st	X, r24
  98:	15 97       	sbiw	r26, 0x05	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	4a e6       	ldi	r20, 0x6A	; 106
  9c:	54 e0       	ldi	r21, 0x04	; 4
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	41 50       	subi	r20, 0x01	; 1
  a2:	50 40       	sbci	r21, 0x00	; 0
  a4:	60 40       	sbci	r22, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__EEPROM_REGION_LENGTH__+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__EEPROM_REGION_LENGTH__+0x2a>
  aa:	e2 cf       	rjmp	.-60     	; 0x70 <main+0x2a>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
