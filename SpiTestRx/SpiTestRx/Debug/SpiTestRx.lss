
SpiTestRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001afb  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016bc  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  000033ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00003690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d47  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000440b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000449b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	65 c0       	rjmp	.+202    	; 0x10e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:

#define F_CPU (20000000ULL / 6)
#include <util/delay.h>

int main(void)
{
  46:	cf 93       	push	r28
  48:	df 93       	push	r29
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62
  4e:	c2 54       	subi	r28, 0x42	; 66
  50:	d1 09       	sbc	r29, r1
  52:	cd bf       	out	0x3d, r28	; 61
  54:	de bf       	out	0x3e, r29	; 62
	PORTMUX.CTRLB = PORTMUX_SPI0_ALTERNATE_gc;
  56:	84 e0       	ldi	r24, 0x04	; 4
  58:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__RODATA_PM_OFFSET__+0x7f8201>
	PORTC.DIRSET = (1 << 1); // Set MISO as output
  5c:	82 e0       	ldi	r24, 0x02	; 2
  5e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__RODATA_PM_OFFSET__+0x7f8441>
	
	SPI0.CTRLB = SPI_BUFEN_bm | SPI_BUFWR_bm | SPI_SSD_bm | SPI_MODE_0_gc;
  62:	e0 e2       	ldi	r30, 0x20	; 32
  64:	f8 e0       	ldi	r31, 0x08	; 8
  66:	84 ec       	ldi	r24, 0xC4	; 196
  68:	81 83       	std	Z+1, r24	; 0x01
	
	SPI0.CTRLA = SPI_PRESC_DIV16_gc | SPI_ENABLE_bm;
  6a:	83 e0       	ldi	r24, 0x03	; 3
  6c:	80 83       	st	Z, r24
	
	volatile uint8_t buffer[64] = {0};
  6e:	fe 01       	movw	r30, r28
  70:	31 96       	adiw	r30, 0x01	; 1
  72:	80 e4       	ldi	r24, 0x40	; 64
  74:	df 01       	movw	r26, r30
  76:	1d 92       	st	X+, r1
  78:	8a 95       	dec	r24
  7a:	e9 f7       	brne	.-6      	; 0x76 <main+0x30>
	volatile int index = 0;
  7c:	23 96       	adiw	r28, 0x03	; 3
  7e:	1e ae       	std	Y+62, r1	; 0x3e
  80:	1f ae       	std	Y+63, r1	; 0x3f
  82:	23 97       	sbiw	r28, 0x03	; 3
	
    while (1) 
    {
		if (SPI0.INTFLAGS & SPI_RXCIE_bm) {
  84:	e0 e2       	ldi	r30, 0x20	; 32
  86:	f8 e0       	ldi	r31, 0x08	; 8
  88:	83 81       	ldd	r24, Z+3	; 0x03
  8a:	88 23       	and	r24, r24
  8c:	ec f7       	brge	.-6      	; 0x88 <__EEPROM_REGION_LENGTH__+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	82 ec       	ldi	r24, 0xC2	; 194
  90:	92 ea       	ldi	r25, 0xA2	; 162
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <__EEPROM_REGION_LENGTH__+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <__EEPROM_REGION_LENGTH__+0x18>
			_delay_ms(50);
			buffer[index++] = SPI0.DATA;
  98:	23 96       	adiw	r28, 0x03	; 3
  9a:	8e ad       	ldd	r24, Y+62	; 0x3e
  9c:	9f ad       	ldd	r25, Y+63	; 0x3f
  9e:	23 97       	sbiw	r28, 0x03	; 3
  a0:	9c 01       	movw	r18, r24
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	23 96       	adiw	r28, 0x03	; 3
  a8:	2e af       	std	Y+62, r18	; 0x3e
  aa:	3f af       	std	Y+63, r19	; 0x3f
  ac:	23 97       	sbiw	r28, 0x03	; 3
  ae:	24 81       	ldd	r18, Z+4	; 0x04
  b0:	a1 e0       	ldi	r26, 0x01	; 1
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	ac 0f       	add	r26, r28
  b6:	bd 1f       	adc	r27, r29
  b8:	a8 0f       	add	r26, r24
  ba:	b9 1f       	adc	r27, r25
  bc:	2c 93       	st	X, r18
			buffer[index++] = SPI0.DATA;
  be:	23 96       	adiw	r28, 0x03	; 3
  c0:	8e ad       	ldd	r24, Y+62	; 0x3e
  c2:	9f ad       	ldd	r25, Y+63	; 0x3f
  c4:	23 97       	sbiw	r28, 0x03	; 3
  c6:	9c 01       	movw	r18, r24
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	23 96       	adiw	r28, 0x03	; 3
  ce:	2e af       	std	Y+62, r18	; 0x3e
  d0:	3f af       	std	Y+63, r19	; 0x3f
  d2:	23 97       	sbiw	r28, 0x03	; 3
  d4:	24 81       	ldd	r18, Z+4	; 0x04
  d6:	a1 e0       	ldi	r26, 0x01	; 1
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ac 0f       	add	r26, r28
  dc:	bd 1f       	adc	r27, r29
  de:	a8 0f       	add	r26, r24
  e0:	b9 1f       	adc	r27, r25
  e2:	2c 93       	st	X, r18
			buffer[index++] = SPI0.DATA;
  e4:	23 96       	adiw	r28, 0x03	; 3
  e6:	8e ad       	ldd	r24, Y+62	; 0x3e
  e8:	9f ad       	ldd	r25, Y+63	; 0x3f
  ea:	23 97       	sbiw	r28, 0x03	; 3
  ec:	9c 01       	movw	r18, r24
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	23 96       	adiw	r28, 0x03	; 3
  f4:	2e af       	std	Y+62, r18	; 0x3e
  f6:	3f af       	std	Y+63, r19	; 0x3f
  f8:	23 97       	sbiw	r28, 0x03	; 3
  fa:	24 81       	ldd	r18, Z+4	; 0x04
  fc:	a1 e0       	ldi	r26, 0x01	; 1
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	ac 0f       	add	r26, r28
 102:	bd 1f       	adc	r27, r29
 104:	a8 0f       	add	r26, r24
 106:	b9 1f       	adc	r27, r25
 108:	2c 93       	st	X, r18
			asm volatile("nop");
 10a:	00 00       	nop
 10c:	bd cf       	rjmp	.-134    	; 0x88 <__EEPROM_REGION_LENGTH__+0x8>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
